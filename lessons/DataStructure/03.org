#+TITLE: DataStructure 03
#+AUTHOR: MKQ
#+KEYWORDS: note
#+LATEX_COMPILER: xelatex
#+LATEX_HEADER:\usepackage[scheme=plain]{ctex}
* 课前
- 定义
- 表示
- 实现
- 应用
** 线性表的抽象数据类型定义
* 顺序表示和实现
** 顺序表
顺序结构存储的线性表
#+BEGIN_SRC
#define LIST_INIT_SIZE 100
#define LIST_INC_SIZE 10
typedef struct
{
    ElemType    *elem;     //首地址
    int         length;    //数组长度
    int         listsize;  //总长
    int         incsize;   //增量
}
//初始化
status initList(SqList &L);
//返回首次出现的位序,时间复杂度O(N)
int locateElem(SqList L,ElemType e);
//获取某个下标的函数
status getElem(SqList L,int i,ElemType &e);
//对于顺序表,获取一个元素非常容易

//销毁顺序表
status DestroyList(SqList &q);

//插入元素
status listInsert(SqList &L,int i,ElemType e);
//删除元素,同时返回该元素的值
status elemDelete(SqList &L,int i,ElemType &e);
//对每个元素调用visit函数
status listTravserse(SqList L,void (* visit)(ElemType e));
//逆置数组
void Reverse(ElemType *E,int s,int t);
#+END_SRC
** 单链表
用一组可能连续也可能不连续的任意存储空间来存放
线性表里面的数据
存储密度低于数组
#+BEGIN_SRC
typedef struct LNode
{
    ElemType       data;
    struct LNode   *next;
}LNode, *LinkList;
//LinkList结构体指针类型名
//LNode *就是一个单纯的指针
//还可以搞一个头结点
//对于有头结点的表
//L==NULL ->表不存在
//L->next==NULL -> 空表
status initList(LinkList &L);

#+END_SRC

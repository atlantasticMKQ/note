#include<stdio.h>
#include<stdlib.h>
#include<string.h>
#include"bool.h"
#include"tools.h"
#include"str.h"
#include"status.h"
#include"types.h"
#include"elem.h"

struct polyNode
{
	int exp;
	double val;
	struct polyNode *next;
};
typedef struct polyNode poly;

poly *polyInit()
{
	poly *head;
	head=MALLOC(poly);
	IF_NULL_RET_NULL(head);
	head->exp=0;
	head->val=0;
	head->next=NULL;
	return head;
}
poly *polyCreat(int exp,double val)
{
	poly *tmp;
	tmp=MALLOC(poly);
	IF_NULL_RET_NULL(tmp);
	tmp->exp=exp;
	tmp->val=val;
	tmp->next=NULL;
	return tmp;
}
int delPolyNode(poly *head,int exp)
{
	poly *pos;
	for(pos=head;pos->next!=NULL&&pos->next->exp!=exp;pos=pos->next);
	if(pos->next==NULL)
		return OK;
	poly *tmp=pos->next;
	pos->next=pos->next->next;
	free(tmp);
	return OK;
}
int addPolyNode(poly *head,int exp,double val)
{
	if(equDouble(val,0.00)==TRUE)
		return OK;
	poly *pos;
	for(pos=head;pos->next!=NULL&&pos->next->exp>=exp;pos=pos->next);
	if(pos!=head&&pos->exp==exp)
		{
			pos->val=val+pos->val;
			printf("pos->val=%lf\n",pos->val);
			if(equDouble(pos->val,0.00)==TRUE)
				{
					delPolyNode(head,pos->exp);
				}
			return OK;
		}
	else if(pos->next==NULL)
		{
			poly *tmp=polyCreat(exp,val);
			IF_NULL_RET_OF(tmp);
			pos->next=tmp;
			return OK;
		}
	else
		{
			poly *tmp=polyCreat(exp,val);
			IF_NULL_RET_OF(tmp);
			tmp->next=pos->next;
			pos->next=tmp;
			return OK;
		}
}

int *freePoly(poly *head)
{
	if(head==NULL)
		{
			return OK;
		}
    	freePoly(head->next);
	free(head);
	return OK;
}
poly *clonePoly(poly *head)
{
	poly *clone=polyInit();
	IF_NULL_RET_NULL(clone);
	poly *tmp;
	int err;
	for(tmp=head;tmp->next!=NULL;tmp=tmp->next)
	{
		err=addPolyNode(clone,tmp->next->exp,tmp->next->val);
		if(err!=OK)
		{
			freePoly(clone);
			return NULL;
		}
	}
	return clone;
}
double findVal(poly *head,int exp)
{
	for(poly *tmp=head;tmp->next!=NULL;tmp=tmp->next)
		{
			if(tmp->next->exp==exp)
				return tmp->next->val;
		}
	return 0;
}
int printPoly(poly *thisPoly)
{
	printf("(%lf %i)",thisPoly->val,thisPoly->exp);
	return OK;
}
int foreachPoly(poly *head,int (* method)(poly *thisPoly))
{
	for(poly *tmp=head;tmp->next!=NULL;tmp=tmp->next)
	{
		method(tmp->next);
	}
	return OK;
}
poly *addPoly(poly *p1,poly *p2)
{
	int err;
	poly *sum=clonePoly(p1);
	IF_NULL_RET_NULL(sum);
	for(poly *tmp=p2;tmp->next!=NULL;tmp=tmp->next)
		{
			err=addPolyNode(sum,tmp->next->exp,tmp->next->val);
			if(err!=OK)
				{
					freePoly(sum);
					return NULL;
				}
		}
	return sum;
}
poly *subPoly(poly *p1,poly *p2)
{
	int err;
	poly *sub=clonePoly(p1);
	IF_NULL_RET_NULL(sub);
	for(poly *tmp=p2;tmp->next!=NULL;tmp=tmp->next)
		{
			err=addPolyNode(sub,tmp->next->exp,0.0-(tmp->next->val));
			if(err!=OK)
				{
					freePoly(sub);
					return NULL;
				}
		}
	return sub;
}
int crossPolyNode(poly *head,double val,int exp)
{
	for(poly *tmp=head;tmp->next!=NULL;tmp=tmp->next)
		{
			tmp->next->exp+=exp;
			tmp->next->val*=val;
		}
	return OK;
}
poly *crossPoly(poly *p1,poly *p2)
{
	int err;
	poly *cross=polyInit();
	IF_NULL_RET_NULL(cross);
	for(poly *tmp=p2;tmp->next!=NULL;tmp=tmp->next)
		{
			poly *crossNode=clonePoly(p1);
			if(crossNode==NULL)
				{
					freePoly(cross);
					return NULL;
				}
			crossPolyNode(crossNode,tmp->next->val,tmp->next->exp);
			poly *sum=addPoly(cross,crossNode);
			if(sum==NULL)
				{
					freePoly(cross);
					freePoly(crossNode);
					return NULL;
				}
			freePoly(cross);
			cross=sum;
		}
	return cross;
}
poly *divPoly(poly *p1,poly *p2)
{
	int err;
	poly *div=polyInit();
	if(p2->next==NULL||p1->next==NULL)
		return div;
	if(div==NULL)
		return NULL;
	poly *divTmp=clonePoly(p1);
	if(divTmp==NULL)
		{
			freePoly(div);
			return NULL;
		}
	int loop=p1->next->exp-p2->next->exp+1;
	for(int i=0;i<loop;i++)
		{
			
			
			
			
int main()
{
	poly *test=polyInit();
	poly *test2=polyInit();
	int exp;
	double val;
	while(TRUE)
		{
			scanf("%lf,%i",&val,&exp);
			addPolyNode(test,exp,val);
			foreachPoly(test,printPoly);
			printf("\n");
			scanf("%lf,%i",&val,&exp);
			addPolyNode(test2,exp,val);
			foreachPoly(test2,printPoly);
			printf("\n");
			foreachPoly(crossPoly(test,test2),printPoly);
			printf("\n");
		}
	
}

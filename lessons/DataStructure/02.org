#+TITLE: Data Structure 02
#+AUTHOR: MKQ
#+KEYWORDS: note
#+LATEX_COMPILER: xelatex
#+LATEX_HEADER:\usepackage[scheme=plain]{ctex}
* 算法效率分析
- 时间耗费

** 语句的频度
算法中某条语句执行的次数
\[
T=\sum frequency of code i
\]
取每条语句执行一次的时间为单位一
- 很多情况下,T是数据规模n的函数T(n)
** 时间复杂度
假设f(n)是一个函数,且有
\[
lim \frac{f(n)}{T(n)}=C
\]
记为:
\[
T(n)=O(f(n))
\]
例如一个三重循环的时间复杂度是
\[
O(n^3)
\]
这样就只关注数量级了,而且只关注其中执行次数最多的那条语句
前面的系数也不用管
*** 注意
一些和数据初始状态相关的不确定性问题
- 按照平均情况估计
- 按照最坏的情况估计
*** 常用复杂度
- O(1)
- O(log n)
- O(n)
- O(n log n)
- O(n^c )
- O(c^n )
- O(n!)
** 空间复杂度
- 数据元素
- 程序占用
- 辅助变量
前两者不评估
第三个所需要的大小
\[
S(n)=O(f(n))
\]
* typedef
- typedef int yourtype
* 作业
P60 1 2
* 线性表
- 定义
- 表示
- 实现
- 操作
- 应用
** 逻辑结构
#+BEGIN_SRC
Linear_list=(D,S)
D={a_1 ,a_2 ,a_3 ... a_n }
S={s}
s={<a_1 ,a_2 >,<a_2 ,a_3 >...}
#+END_SRC
- 是n个节点的有限序列
- 可以为空,叫做空线性表
- 有一个头结点,有一个尾节点
- 直接前驱,直接后继
- 强调元素之间的相互关系
#+BEGIN_SRC
ADT List{
 Element:D={a_1 ...}
 Relation:R={<>,<>,<>...}
 Method:
     InitList(&L)
     DestoryList(&L)
     ...
}ADT List
#+END_SRC
- ADT中包含的运算要足够基本
- 所以里面没有排序一类的
** 举例
- 就地运算
计算结果放在原来的线性表里面
- 异地运算
就是放在不同的表里面
* 线性表
顺序存储&链式存储
前者是数组,地址是连续的,后者是链表,通过指针联系在一起
 
